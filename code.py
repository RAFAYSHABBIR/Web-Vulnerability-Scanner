from ast import Return
from os import urandom
from threading import Timer
from flask import *
from zapv2 import ZAPv2
import time
import validators
import re
import Zap_Scan
from flask_sqlalchemy import SQLAlchemy
from flask_login import UserMixin, login_user, LoginManager, login_required, logout_user, current_user
from flask_wtf import  FlaskForm    
from wtforms import StringField ,PasswordField, SubmitField
from wtforms.validators import InputRequired, Length, ValidationError
from flask_bcrypt import Bcrypt
import subprocess
import os

import threading

app = Flask(__name__)
# Adding Database 
db = SQLAlchemy(app)
bcrypt = Bcrypt(app)

app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///database.db'
app.config['SECRET_KEY'] = 'secretkey'

login_manager = LoginManager()
login_manager.init_app(app)
login_manager.login_view = "login"


def run_zap():
    os.system("/usr/bin/owasp-zap 2>&1 >/dev/null");

threading.Thread(target=run_zap, daemon=True).start()

@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))

# table Creation
class User(db.Model, UserMixin):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(20), nullable=False, unique=True)
    password = db.Column(db.String(80), nullable=False)

# Registration Form Creation
class RegisterForm(FlaskForm):
    username = StringField(validators=[InputRequired(), Length(min=4, max=20)], render_kw={"placeholder": "Username"})
    password = PasswordField(validators=[InputRequired(), Length(min=4, max=20)], render_kw={"placeholder": "Password"})
    submit = SubmitField("Register")
    # validate Username
    def validate_username(self, username):
        existing_user_name = User.query.filter_by(
            username=username.data).first()
        if existing_user_name:
            raise ValidationError(
                "That username already exists. please choose a different one."
            )

class LoginForm(FlaskForm):
    username = StringField(validators=[InputRequired(), Length(min=4, max=20)], render_kw={"placeholder": "Username"})
    password = PasswordField(validators=[InputRequired(), Length(min=4, max=20)], render_kw={"placeholder": "Password"})
    submit = SubmitField("Login")

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/login', methods=['GET','POST'])
def Login(): 
    form = LoginForm()
    if form.validate_on_submit():
        user = User.query.filter_by(username=form.username.data).first()
        if user:
            if bcrypt.check_password_hash(user.password, form.password.data):
                login_user(user)
                return redirect(url_for('Scan'))

    return render_template('Login.html',form=form)

@app.route('/signup', methods=['GET','POST'])
def Sign():   
    form = RegisterForm()

    if form.validate_on_submit():
        hashed_password = bcrypt.generate_password_hash(form.password.data)
        new_user = User(username=form.username.data, password = hashed_password)
        db.session.add(new_user)
        db.session.commit()
        return redirect(url_for('direct')) 

    return render_template('Signup.html',form=form)

@app.route('/logout',methods=['GET','POST'])
def logout():
    return redirect(url_for('Login'))

@app.route('/register',methods=['GET','POST'])
def direct():
    return render_template('Successfully.html')

@app.route('/Scan')
def Scan():
    return render_template('Scan.html')

@app.route('/Report',methods=['GET','POST'])
def Report():
    if(request.method == 'GET'):
        target = request.args.get('URL')
        print(target)
        Zap_Scan.scanning(target)
        return redirect(url_for("formatHTML"))

@app.route('/generate',methods=['GET','POST'])
def Generate():
    time.sleep(5)
    import os
    print(os.getcwd())
    return render_template_string(open('./templates/report.html').read())

@app.route('/scanned')
def scanned():
    return render_template("Scanned.html")

@app.route('/Results')
def formatHTML():
    return render_template("formatHTML.html")

@app.route('/download')
def download():
    path = 'templates/Scan_Report.html'
    return send_file(path, as_attachment=True)

if __name__ == '__main__':
    app.run(debug=True)


